"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5481],{8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function l(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:t},e.children)}},9891:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"prompts/templates","title":"Templates","description":"Manage, test, and evolve prompt templates.","source":"@site/docs/prompts/templates.md","sourceDirName":"prompts","slug":"/prompts/templates","permalink":"/docs/prompts/templates","draft":false,"unlisted":false,"editUrl":"https://github.com/llama-farm/llamafarm/tree/main/docs/website/docs/prompts/templates.md","tags":[],"version":"current","frontMatter":{"title":"Templates","sidebar_label":"Templates","slug":"/prompts/templates","toc_min_heading_level":2,"toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Prompts","permalink":"/docs/prompts"},"next":{"title":"Evaluation","permalink":"/docs/prompts/evaluation"}}');var i=n(4848),s=n(8453);const l={title:"Templates",sidebar_label:"Templates",slug:"/prompts/templates",toc_min_heading_level:2,toc_max_heading_level:3},o=void 0,r={},p=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Template modification patterns",id:"template-modification-patterns",level:2},{value:"1) Adding context-aware behavior",id:"1-adding-context-aware-behavior",level:3},{value:"2) Multi-language support",id:"2-multi-language-support",level:3},{value:"3) Dynamic template selection",id:"3-dynamic-template-selection",level:3},{value:"Integration examples",id:"integration-examples",level:2},{value:"RAG pipeline",id:"rag-pipeline",level:3},{value:"A/B testing templates",id:"ab-testing-templates",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Manage, test, and evolve prompt templates."}),"\n",(0,i.jsx)(t.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# List all available templates\nuv run python -m prompts.cli template list\n\n# Execute a simple query\nuv run python -m prompts.cli execute "What is machine learning?" --show-details\n\n# Test a specific template\nuv run python -m prompts.cli template test qa_basic \\\n  --variables \'{"query":"What is AI?", "context":[{"title":"AI Guide", "content":"AI is..."}]}\'\n'})}),"\n",(0,i.jsx)(t.h2,{id:"template-modification-patterns",children:"Template modification patterns"}),"\n",(0,i.jsx)(t.h3,{id:"1-adding-context-aware-behavior",children:"1) Adding context-aware behavior"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Original template (basic)\n{\n  "template": "Answer the question: {{query}}\\n\\nAnswer:"\n}\n\n# Enhanced with context awareness\n{\n  "template": "{% if context %}Based on the following context:\\n{% for doc in context %}[{{doc.title}}]: {{doc.content}}\\n{% endfor %}{% endif %}\\n\\nQuestion: {{query}}\\n\\nProvide a detailed answer{% if context %} using the provided context{% endif %}:"\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"2-multi-language-support",children:"2) Multi-language support"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Create language-specific template variants\ncp templates/basic/qa_basic.json templates/basic/qa_basic_es.json\n# Edit for Spanish and add language detection in your strategy\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-dynamic-template-selection",children:"3) Dynamic template selection"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# beginner_explanation.json\n{\n  "template": "Explain {{topic}} in simple terms, as if explaining to someone new to the field:\\n\\n"\n}\n# expert_analysis.json\n{\n  "template": "Provide an in-depth technical analysis of {{topic}}, including:\\n- Advanced concepts\\n- Current research\\n- Technical implications\\n\\n"\n}\n# Use with dynamic selection\nuv run python -m prompts.cli execute "Explain quantum computing" \\\n  --template beginner_explanation \\\n  --variables \'{"topic": "quantum computing", "user_level": "beginner"}\'\n'})}),"\n",(0,i.jsx)(t.h2,{id:"integration-examples",children:"Integration examples"}),"\n",(0,i.jsx)(t.h3,{id:"rag-pipeline",children:"RAG pipeline"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import asyncio\nfrom prompts.core.prompt_system import PromptSystem\nfrom prompts.models.config import PromptConfig\n\nasync def rag_query(question: str, retrieved_docs: list):\n    config = PromptConfig.from_file(\'config/default_prompts.json\')\n    prompt_system = PromptSystem(config)\n    result = prompt_system.execute_prompt(\n        query=question,\n        variables={"context": retrieved_docs, "source_citations": True},\n        template_override="qa_detailed"\n    )\n    return result.rendered_prompt\n'})}),"\n",(0,i.jsx)(t.h3,{id:"ab-testing-templates",children:"A/B testing templates"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'cp templates/basic/qa_basic.json templates/basic/qa_basic_v2.json\nuv run python -m prompts.cli execute "Explain machine learning" --template qa_basic > response_a.txt\nuv run python -m prompts.cli execute "Explain machine learning" --template qa_basic_v2 > response_b.txt\nuv run python -m prompts.cli evaluate "$(cat response_a.txt)" \\\n  --query "Explain machine learning" \\\n  --criteria "clarity,completeness" \\\n  --output-format score > score_a.txt\nuv run python -m prompts.cli evaluate "$(cat response_b.txt)" \\\n  --query "Explain machine learning" \\\n  --criteria "clarity,completeness" \\\n  --output-format score > score_b.txt\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);